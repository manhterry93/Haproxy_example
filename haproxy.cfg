global
	maxconn 4096	# limit connect to proxy
	daemon
	log 127.0.0.1 local0
	log 127.0.0.1 local1 notice

defaults
	timeout connect 10s
	timeout client 30s
	timeout server 30s
	
	log global
	mode http	# mode tcp
	option httplog	# option tcplog
	maxconn 3000

	stats enable
	# option forwardfor
	# option http-server-close
	stats uri /haproxyStats	#URL statistic page
	stats auth admin:admin123	# user/pass for authentication http://localhost:8080/haproxyStats

# FroneEnd process request come from port 80
frontend http-in
	bind *:80
	acl host_test1 hdr_dom(host) -i testhaproxy1.com	# If access via domain testhaproxy1.com
	acl host_test2 hdr_dom(host) -i testhaproxy2.com	# If access via domain testhaoroxy2.com
	
	use_backend bke_80_test1 if host_test1 			# Send to bke_80_test1 if host_test1 ok
	use_backend bke_80_test2 if host_test2			# Send to backend bke_80_test2 if host_test2 ok

# Front end process request come from port 443
frontend https-in	
	bind *:443
	mode tcp						# Load balancing tcp mode
	option tcplog						
	tcp-request inspect-delay 10s
	tcp-request content accept if { req_ssl_hello_type 1 }
	
	acl acl1 req.ssl_sni -m end testhaproxy1.com		# if access via domain testhaproxy1.com
	acl acl2 req.ssl_sni -m end testhaproxy2.com 		# If access via domain testhaproxy2.com
	
	use_backend bke_443 if acl1 || acl2			# Send request to bke_443 if acl1 or acl2 ok

backend bke_80_test1
	balance roundrobin
	option http-keep-alive
	option forwardfor
	server server1 google.com:80 check

backend bke_80_test2
	balance roundrobin
	option httpclose
	option forwardfor
	server server1 wikipedia.org:80 check
	server server2 bing.com:80 check
	server server3 google.com:80 check

backend bke_443
	mode tcp
	balance source
	option ssl-hello-chk
	server server1 wikipedia.org:443 check
	# redirect scheme https if !{ ssl_fc }
	
	
